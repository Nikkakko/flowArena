// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum SocialMediaPlatforms {
  INSTAGRAM
  FACEBOOK
  SPOTIFY
  YOUTUBE
}


enum Role {
  USER
  ADMIN
}

enum BattleType {
  ACAPELLA
  FLOW
}

enum BattleStatus {
  UPCOMING
  LIVE
  COMPLETED
}

  
model User {
  id          String   @id @default(cuid())
  name        String 
  email       String @unique
  passwordHash    String @unique
  
  // Relationships
  battleVotes BattleVote[]
  artistVotes ArtistVote[]
  comments  Comment[]

 



 

  role        Role @default(USER)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Season {
  id          String   @id @default(cuid())
  name        String   // e.g., "Season 1", "Summer 2024"
  startDate   DateTime
  endDate     DateTime
  type        BattleType
  
  winner      Artist?   @relation("SeasonWinner", fields: [winnerId], references: [id])
  winnerId    String?
  
  battles     Battle[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Artist {
  id          String   @id @default(cuid())
  nickName    String
  image      String?
  slug       String @unique
  wins        Int
  loses       Int
  bio        String
  isPopular   Boolean @default(false)




  // Relationships
  socialMedia SocialMedia[]
  quotes Quote[]
  votes      ArtistVote[]


  battlesParticipated Battle[]
  seasonsWon    Season[] @relation("SeasonWinner")
  battlesWon    Battle[] @relation("BattleWinner")
  

 

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quote {
  id          String   @id @default(cuid())
  quote       String
  artist      Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model SocialMedia {
  id          String   @id @default(cuid())
  name        SocialMediaPlatforms
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relationships

  // An Artist social media accounts
  artist      Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId    String
}


model BattleVote {
  id          String   @id @default(cuid())
  userId      String
  battleId    String
  createdAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id])
  battle      Battle @relation(fields: [battleId], references: [id])

  // Unique constraint to ensure one vote per user per battle
  @@unique([userId, battleId])
}

model ArtistVote {
  id          String   @id @default(cuid())
  userId      String
  artistId    String
  createdAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id])
  artist      Artist @relation(fields: [artistId], references: [id])

  // Unique constraint to ensure one vote per user per artist
  @@unique([userId, artistId])
}


model Battle {
  id          String   @id @default(cuid())
  link       String
  coverImage String
  title      String
  description String?
  slug      String @unique
  isFeatured Boolean @default(false)

  // Battle Type
  type       BattleType
  status     BattleStatus 
  // Relationships
  artists    Artist[]
  comments  Comment[]
  votes      BattleVote[]
  season      Season   @relation(fields: [seasonId], references: [id])
  seasonId    String
  
  winner      Artist?  @relation("BattleWinner", fields: [winnerId], references: [id])
  winnerId    String?
  
  
  createdAt   DateTime @default(now())

  
}
model Comment {
  id          String   @id @default(cuid())
  userId      String
  battleId    String
  content     String
  likes       Int @default(0)
  createdAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id])
  battle      Battle @relation(fields: [battleId], references: [id])
}